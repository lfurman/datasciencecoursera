getwd()
getwd()
library(XML)
install.packages("XML")
library(XML)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileurl, useinternal = TRUE)
doc <- xmlTreeParse(fileurl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[[1]]]
rootNode[[1]]
rootNode[1]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
xmlSApply(rootNode, xmlValue)
xmlSApply(rootNode, "//name", xmlValue)
xmlSApply(rootNode, //name, xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//name", xmlValue)[1]
xpathSApply(rootNode, "//name", xmlValue)[0]
xpathSApply(rootNode, "//name", xmlValue)[2]
library(jsonLite)
install.packages("jsonLite")
install.packages("jsonlite")
library(jsonLite)
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("httr")
library(httr)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
names(jsonData$owner)
jsonData$owner$login
myJSON <- toJSON(iris, pretty = TRUE)
cat(myJSON)
iris2 <- fromJSON(myJSON)
head(iris2)
library(data.table)
install.packages(data.table)
install.packages("data.table")
library(data.table)
DF <- data.frame(x = rnorm(9), y = rep(c("a", "b", "c"), each = "3"), z = rnorm(9))
head(DF, 3)
DF <- data.table(x = rnorm(9), y = rep(c("a", "b", "c"), each = "3"), z = rnorm(9))
head(DF, 3)
tables()
DF(, c(2, 3))
DF[], c(2, 3)]
DF[, c(2, 3)]
DF[, list(mean(x), sum(z))]
DF[, table(y)]
DF[, w:=x^2]
head(DF
)
DF[, m := {tmp <- (x + z); log2(tmp + 5)}]
head(DF)
DF[, b := mean(x + w), by = a]
DF[, b := mean(x + w), by = a]
DF[, b := mean(x + w), by = x]
head(DF)
DF[, b := mean(x + w), by = "a"]
DT1 <- data.table(x = c("a", "a", "b", "dt1"), y = 1:4)
DT2 <- data.table(x = c("a", "b", dt2"), z = 5:7)
;
F
)
""
DT2 <- data.table(x = c("a", "b", "dt2"), z = 5:7)
setkey(DT1, x)
setkey(DT2, x)
merge(DT1, DT2)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv "
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL)
download.file(fileURL, destfile = "test.txt")
download.file(fileURL, destfile = "test.txt", method = "curl")
list.files(".")
setwd("/Users/lfurman/Documents/Personal/datasciencecoursera/GettingAndCleaningData")
setwd("Quiz1")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL, destfile = "question1.txt", method = "curl")
getwd()
data <- read.table("question1.txt", header = "TRUE")
data <- read.table("question1.txt")
head(data)
data <- read.csv("question1.txt", header = TRUE)
head(data)
colnames(data)
colnames(data)
ncols(data)
cols(data)
ncol(data)
head(data, c("VAL"))
head(data[, c("VAL")])
head(data[, c("VAL"), 4])
nrow(data[, VAL >= 1000])
nrow(data[, data[, "VAL"] >= 1000])
head(data[, data$VAL >= 1000])
head(, data[, data$VAL >= 1000])
data[, data$VAL >= 1000]
colnames(data)
head(data[, c("VAL")])
head(data[, c("VAL")], 2)
data[, data$VAL >= 1000]
data[data$VAL >= 1000]
nrow(data[which(data$VAL >= 1000000)])
nrow(data[which(data$VAL == 24)])
nrow(data[which(data$VAL = 24)])
nrow(data[which(data$VAL == 24)])
nrow(data[which(data$VAL >= 24)])
nrow(data[which(data$VAL eq 24)])
nrow(data[which(data$VAL > 24)])
data[which(data$VAL > 1000000)]
head(data[which(data$VAL > 1000000)])
nrow(data[which(data$VAL >= 1000000)], )
nrow(data[which(data$VAL >= 1000000), ])
data[which(data$VAL >= 1000000), ]
data[which(data$VAL == 24), ]
nrow(data[which(data$VAL == 24), ])
nrow(data[which(data$VAL == 24), ])
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
unique(data[, c("FES")])
download.file(fileURL, destfile = "NGAP.xlsx", method = "curl")
download.file(fileURL, destfile = "NGAP.xlsx", method = "curl", mode="wb")
download.file(fileURL, destfile = "NGAP.xlsx", mode="wb")
download.file(fileURL, destfile = "NGAP.xlsx", method = "curl")
file <- "NGAP.xlsx"
read.xlsx(file, 1, rowIndex = NULL, startRow = 18, endRow = 23, colIndex = 7:15, as.data.frame = TRUE, header = TRUE)
install.packages("xlsx")
# load libraries
library(xlsx)
read.xlsx(file, 1, rowIndex = NULL, startRow = 18, endRow = 23, colIndex = 7:15, as.data.frame = TRUE, header = TRUE)
data <- read.xlsx(file, 1, rowIndex = NULL, startRow = 18, endRow = 23, colIndex = 7:15, as.data.frame = TRUE, header = TRUE)
head(data)
data <- read.xlsx(file, 1, rowIndex = 18:23, colIndex = 7:15, as.data.frame = TRUE, header = TRUE)
head(data)
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- read.xlsx(file, 1, rowIndex = 18:23, colIndex = 7:15, as.data.frame = TRUE, header = TRUE)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(dat$Zip * dat$Ext, na.rm = T)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data <- xmlParse(fileURL)
install.packages("XML")
install.packages("XML")
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data <- xmlParse(fileURL)
library(RCurl)
install.packages("RCurl")
install.packages("RCurl")
getwd()
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data <- xmlParse(fileURL)
data <- xmlParse(getURL(fileURL))
fileURL <- sub("https", "http", "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
data <- xmlParse(getURL(fileURL))
data <- xmlTreeParse(getURL(fileURL))
library(XML)
library(RCurl)
data <- xmlTreeParse(getURL(fileURL))
head(data)
data[[1]]
data[[1]][1]
data[[1]][1]
data[["zipcode"]]
data["row(//point/@latitude)]"
;
data[["row"]][["zipcode"]]
data[["row"]][["zipcode"]]
data <- xmlToDataFrame(getURL(fileURL))
head(data)
colnames(data)
nrow(data)
data <- xmlToDataFrame(fileURL)
head(data)
colnames(data)
fileURL <- sub("https", "http", "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
data <- xmlTreeParse(getURL(fileURL))
zipcodes <- xpathSApply(data, "//row/zipcode", xmlValue)
zipcodes <- xpathSApply(data, "//response/row/zipcode", xmlValue)
zipcodes <- xpathSApply(data, "//response/row/zipcode")
zipcodes <- xpathSApply(data, "//response")
data <- xmlTreeParse(getURL(fileURL), useInternalNodes = TRUE)
head(data)
zipcodes <- xpathSApply(data, "//response")
head(zipcodes)
zipcodes <- xpathSApply(data, "//response/row/zipcode")
head(zipcodes)
zipcodes <- xpathSApply(data, "//response/row/zipcode", xmlValue)
head(zipcodes)
zipcodes <- xpathSApply(data, "//response/row/zipcode[@value = 21231"], xmlValue)
zipcodes <- xpathSApply(data, "//response/row/zipcode, xmlValue)
""
;
''
""
zipcodes <- xpathSApply(data, "//response/row/zipcode", xmlValue)
zipcodes[1]
zipcodes[[1]]
size(zipcodes)
length(zipcodes)
zipcodes <- xpathSApply(data, "//response/row/row/zipcode", xmlValue)
head(zipcodes)
length(zipcodes[sapply(input.list, function(x) class(x)=="desired.class")])
length(zipcodes[sapply(zipcodes, function(x) x == "21231")])
download.file(fileURL, destfile = "question5.txt", method = "curl")
install.packages("data.table")
library(data.table)
download.file(fileURL, destfile = "question5.csv", method = "curl")
DT <- fread("question5.csv", header = FALSE)
DT <- fread("question5.csv", header = TRUE)
DT <- fread("question5.csv", header = TRUE)
head(DT)
system.time(average <- sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(average <- DT[,mean(pwgtp15),by=SEX])
system.time(average <- tapply(DT$pwgtp15,DT$SEX,mean))
system.time(average <- mean(DT$pwgtp15,by=DT$SEX)) # elapsed:
system.time(average <- mean(DT$pwgtp15,by=DT$SEX)) # elapsed:
system.time(average <- sapply(split(DT$pwgtp15,DT$SEX),mean)) # eslapsed: 0.001
system.time(average <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(average <- (mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(average <- mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15))
system.time(average <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(average <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]))
system.time(average <- rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2]))
system.time(average <- rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
system.time(average <- rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL, destfile = "question1.txt", method = "curl")
data <- read.csv("question1.txt", header = TRUE)
nrow(data[which(data$VAL == 24), ])
head(data)
colnames(data)
head(data[, c("FES")])
head(data[, c("FES")], 10)
head(DT)
system.time(average <- sapply(split(DT$pwgtp15,DT$SEX),mean)) # eslapsed: 0.001
system.time(average <- DT[,mean(pwgtp15),by=SEX]) # elapsed: 0.002
system.time(average <- tapply(DT$pwgtp15,DT$SEX,mean)) # elapsed: 0.002
system.time(average <- mean(DT$pwgtp15,by=DT$SEX)) # elapsed: 0 -> FASTEST!!!
system.time(average <- mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15)) # elapsed: 0.020
system.time(average <- rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]
system.time(average <- rowMeans(DT)[DT$SEX=="1"], rowMeans(DT)[DT$SEX=="2""])
?
;
""
system.time(average <- rowMeans(DT)[DT$SEX=="1"], rowMeans(DT)[DT$SEX=="2"])
system.time(average <- mean(DT$pwgtp15,by=DT$SEX)) # elapsed: 0 -> FASTEST!!!
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
install.packages("RMySQL")
install.packages("RMySQL")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type = "source")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
library("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
install.packages("RMySQL", type = "source")
library(RMySQL)
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
# load libraries
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
library(RMySQL)
install.packages("DBI")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
install.packages("RMySQL", type = "source")
library(RMySQL)
library(DBI)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
library(RMySQL)
install.packages("RTools")
install.packages("RTools", type = "source")
install.packages("RMySQL", type = "source")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
# load libraries
library(DBI)
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
# connect to database
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases"); dbDisconnect(ucscDb);
result
